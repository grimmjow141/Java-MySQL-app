import java.awt.Color;
import java.awt.EventQueue;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.JButton;
import javax.swing.ImageIcon;

public class Settings implements ApplyThemeAndFont {
	
	private static JFrame frame;
	private static JLabel label_1;
	private static JLabel label_2;
	private static JLabel label_1_1;
	private static JLabel label_1_2;
	private static JToggleButton toggle_button;
	private static BackButton back_button;
	
	public static enum font_state {
		mic,
		mediu,
		mare
	};
	
	public static boolean theme_state;
	public static Settings.font_state font_state;

	/**
	 * Launch the application.
	 */
	public void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Settings window = new Settings();
					read_settings_from_file("src/files/settings.txt");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public Settings() {
		initialize();
	}
	
	public void apply_theme_and_font () {
		if (!theme_state) {
			frame.getContentPane().setBackground(new Color(20,20,20));
			
			label_1.setForeground(new Color(150,150,150));
			label_2.setForeground(new Color(150,150,150));
			label_1_1.setForeground(new Color(150,150,150));
			label_1_2.setForeground(new Color(150,150,150));
			
			toggle_button.setBackground(new Color(50,50,50));
		}
		else {
			frame.getContentPane().setBackground(new Color(255,255,255));
			label_1.setForeground(new Color(0,0,0));
			label_2.setForeground(new Color(0,0,0));
			label_1_1.setForeground(new Color(0,0,0));
			label_1_2.setForeground(new Color(0,0,0));
			
			toggle_button.setBackground(new Color(238,238,238));
		}	
	}
	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		
		frame = new JFrame();
		frame.setVisible(true);
		frame.setResizable(false);
		frame.setBounds(540, 260, 450, 300);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		label_1 = new JLabel("Tem\u0103: ");
		label_1.setBounds(35, 95, 45, 13);
		frame.getContentPane().add(label_1);
		
		label_2 = new JLabel("Font: ");
		label_2.setBounds(35, 162, 45, 13);
		frame.getContentPane().add(label_2);
		
		label_1_1 = new JLabel("light");
		label_1_1.setBounds(86, 95, 45, 13);
		frame.getContentPane().add(label_1_1);
		
		toggle_button = new JToggleButton("");
		toggle_button.setBounds(118, 91, 45, 21);
		frame.getContentPane().add(toggle_button);
		
		toggle_button.addChangeListener(new ChangeListener() {
			
			@Override
			public void stateChanged(ChangeEvent event) {
				if (toggle_button.isSelected())
					Settings.theme_state = false;
				else
					Settings.theme_state = true;
				apply_theme_and_font();
				write_settings_to_file("src/files/settings.txt");
			}
		});
		
		label_1_2 = new JLabel("dark");
		label_1_2.setBounds(166, 95, 45, 13);
		frame.getContentPane().add(label_1_2);
		
		BackButton back_button = new BackButton();
		back_button.setLocation(35, 218);
		frame.getContentPane().add(back_button);
		
		read_settings_from_file("src/files/settings.txt");
		apply_theme_and_font();
	}
	
	public static void read_settings_from_file (String file_name) {
		
		try {
			Scanner scanner = new Scanner(new File(file_name));
			try {
				String a = scanner.next();
				String b = scanner.next();
				if (! Settings.verify_values(a, b) )
					throw new Exception("Bad values");
				if (a.compareToIgnoreCase("L") == 0) 
					Settings.theme_state = true; //light theme => true
				else
					Settings.theme_state = false;//dark theme => false
				
				if (b.compareTo("1") == 0)
					Settings.font_state = Settings.font_state.mic;
				else if (b.compareTo("2") == 0)
					Settings.font_state = Settings.font_state.mediu;
				else
					Settings.font_state = Settings.font_state.mare;
				
			} catch (Exception e) {
				JOptionPane.showMessageDialog(null, "Fișierul cu setările aplicației nu are formatul corect, se va ieșii din fereastră..");
				System.exit(0);
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			JOptionPane.showMessageDialog(null, "Nu se poate deschide fișierul cu setările aplicației, se va ieșii din fereastră..");
			System.exit(0);
		}
	}
	
	public static void write_settings_to_file (String file_name) {
		try {
			FileWriter writer = new FileWriter(new File(file_name));
			String value = "";
			if (Settings.theme_state)
				value += "L ";
			else
				value += "D ";
			if (Settings.font_state == Settings.font_state.mic)
				value += "1";
			else if (Settings.font_state == Settings.font_state.mediu)
				value += "2";
			else
				value += "3";
			System.out.println(value);
			writer.write("");
			writer.write(value);
			writer.close();
		} catch (FileNotFoundException e) {
			JOptionPane.showMessageDialog(null, "Fișierul cu setările aplicației nu poate fi găsit..");
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "Eroare la scrierea în fișierul cu setările aplicației..");
		}
	}
	
	public static boolean verify_values (String a, String b) {
		if ( (a.compareToIgnoreCase("L") == 0 || a.compareToIgnoreCase("D") == 0) && (b.compareTo("1") == 0 || b.compareTo("2") == 0 || b.compareTo("3") == 0) )
			return true;
		return false;
	}
}
