import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;
import javax.swing.JPanel;
import javax.swing.table.JTableHeader;
import java.awt.GridLayout;

public class SearchByName implements ApplyThemeAndFont {

	protected static JFrame frame;
	protected static JTable table;
	protected static JTableHeader header;
	protected static JScrollPane scrollPane;
	protected static JLabel label_1;
	protected static JButton search_button;
	protected static Connection connection;
	protected static JTextField text_field;
	protected static Field[] fields;
	protected static ActionListener search_listener;
	protected static JPanel panel;
	protected static JLabel label_2_1, label_2_2, label_2_3, label_2_4, label_2_5, label_2_6;
	protected static ColumnCheckBox box_1, box_2, box_3, box_4, box_5, box_6;
	protected static BackButton back_button;
	
	public static Field[] getFields() {
		return fields;
	}

	protected static void connect_to_database (String url, String username, String password) {
		
		try {
			//Class.forName("com.mysql.jc.jdbc.Driver");
			connection = DriverManager.getConnection(url, username, password);
		
		} catch (Exception e) {
			connection = null;
			JOptionPane.showMessageDialog(null, e);
		}
	}
	
	protected static JTable populate_table (String condition, Field... names) {
		
		Arrays.sort(names, new FieldComparator()); //sortam campurile din tabel: id primul, numele al doilea s.a.m.d.
		
		String[] column_names = new String[names.length];
		int k = 0;
		for (Field obj: names) {
			String name = obj.getName();
			column_names[k ++] = name;
			//System.out.println(name);
		}
		
		String statement = "SELECT ";
		for (Field obj: names) {
			String name = obj.getName();
			if (name != "Platitor_TVA" && name != "C.U.I.") {
				statement += "`";
				statement += name;
				statement += "`";
				statement += ",";
			}
			if (name == "C.U.I.") { //vrem sa se afiseze C.U.I.-ul complet (cu RO)
				statement += "IF (`Platitor_TVA` = 'DA', CONCAT('RO',`C.U.I`), `C.U.I`) AS `C.U.I.`";
				statement += ",";
			}
		}
		
		statement = statement.substring(0, statement.length() - 1); //tai ultima virgula din propozitie
		statement += " FROM `societate` ";	
		
		if (condition == null) 
			statement += ";";
		else {
			statement += "HAVING ";
			statement += condition;
			statement += ";";
		}
		
		//testare
		//System.out.println(statement);
		
		String[][] data = new String[100][100];
		
		try {
		
			try  (PreparedStatement stm = connection.prepareStatement(statement)) {
				ResultSet results = stm.executeQuery(statement);
				if (results.next() == false)
					JOptionPane.showMessageDialog(null, "C\u0103utarea nu a furnizat niciun rezultat..");
				else {
					int i = 0, j = 0;
					
					do {
						j = 0;
						for (Field field: names) {
							String value = results.getString(field.getName());
							data[i][j] = value;
							j ++;
						}
						i ++;
					} while (results.next());
					
					frame.remove(scrollPane);
					
					table = new JTable(data, column_names);
					table.setEnabled(false);
					table.setCellSelectionEnabled(true);
					table.setFillsViewportHeight(true);
					
					header = table.getTableHeader();
					header.setReorderingAllowed(false);
					
					scrollPane = new JScrollPane(table);
					scrollPane.setBounds(6,110,540,175);
					frame.getContentPane().add(scrollPane);
					
					//din cauza unor mici probleme trebuie sa aplicam din nou tema si fontul pentru tabela, header si scrollPane deoarcece 
					//pe acestea le reinitializam in aceasta functie
					
					if (!Settings.theme_state) {
						scrollPane.setBackground(Color.GRAY);
						table.setBackground(new Color(150,150,150));
						table.setForeground(Color.WHITE);
						header.setBackground(Color.DARK_GRAY);
						header.setForeground(Color.WHITE);
					}
					else {
						scrollPane.setBackground(new Color(238,238,238));
						table.setBackground(Color.WHITE);
						table.setForeground(Color.BLACK);
						header.setBackground(new Color(238,238,238));
						header.setForeground(Color.BLACK);
					}
					
					Font font = null, font_2 = null;	
					switch (Settings.font_state) {
						case mic:
							font =  new Font("Sans Serif", Font.PLAIN, 10);
							font_2 = new Font("Sans Serif", Font.PLAIN, 12);
							break;
						case mediu:
							font = new Font("Sans Serif", Font.PLAIN, 12);	
							font_2 = new Font("Sans Serif", Font.PLAIN, 14);
	
							break;
						case mare:
							font = new Font("Sans Serif", Font.PLAIN, 14);	
							font_2 = new Font("Sans Serif", Font.PLAIN, 16);
					}
					table.setFont(font);
					header.setFont(font_2);
				}
	//				table.getColumnModel().getColumn(0).setPreferredWidth(8);
	//				table.getColumnModel().getColumn(2).setPreferredWidth(17);
	
			}	catch (SQLException e) {
					JOptionPane.showMessageDialog(null, e.toString());
			}
		} catch (NullPointerException e2) {
			System.out.println("NullPointer error..");
			return table;
		}
		return table;
	}
	
	public static void main(String[] args) {
	
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					new SearchByName();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
		});
	}

	public SearchByName() {
	
	}
	
	public SearchByName(boolean x) {
		if (x)
			initialize();
	}

	/**
	 * @wbp.parser.entryPoint
	 */
	protected void initialize() {
		
		Settings.read_settings_from_file("src/files/settings.txt");
		
		frame = new JFrame();
		frame.setVisible(true);
		frame.setResizable(false);
		frame.setBounds(350, 225, 710, 367);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		table = new JTable();
		header = table.getTableHeader();
		header.setReorderingAllowed(false);
		scrollPane = new JScrollPane(table);

		frame.getContentPane().add(scrollPane);
		
		label_1 = new JLabel("Caut\u0103 dup\u0103 nume: ");
		label_1.setFont(new Font("SansSerif", Font.PLAIN, 15));
		label_1.setHorizontalAlignment(SwingConstants.CENTER);
		label_1.setBounds(37, 39, 157, 16);
		frame.getContentPane().add(label_1);
		
		search_button = new JButton("CAUT\u0102");
		
		search_listener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				String name = text_field.getText();
				if (name.isBlank())
					populate_table(null, fields);
				else {
					String condition = "`Nume` LIKE '%" + name + "%'";
					populate_table(condition, fields);
				}
			}
		};
		
		search_button.addActionListener(search_listener);
	
		search_button.setFont(new Font("SansSerif", Font.PLAIN, 15));
		search_button.setBounds(594, 32, 96, 28);
		frame.getContentPane().add(search_button);
		
		text_field = new JTextField();
		text_field.setBounds(243, 34, 232, 28);
		frame.getContentPane().add(text_field);
		text_field.setColumns(10);
		
		fields = new Field[6];
		
		fields[0] = new Field("id");
		fields[1] = new Field("Nume");
		fields[2] = new Field("C.A.E.N.");
		fields[3] = new Field("C.U.I.");
		fields[4] = new Field("E.U.I.D.");
		fields[5] = new Field("Nr. ordine");
		
		//System.out.println(Field.getNr_of_fields());
		
		back_button = new BackButton();
		back_button.setLocation(550, 32);
		frame.getContentPane().add(back_button);
		
		panel = new JPanel();
		panel.setBackground(Color.LIGHT_GRAY);
		panel.setBounds(550, 72, 140, 250);
		frame.getContentPane().add(panel);
		panel.setLayout(new GridLayout(6, 2, 10, 0));
		
		label_2_1 = new JLabel("id");
		label_2_1.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(label_2_1);
		
		box_1 = new ColumnCheckBox(fields[0], 134, 66);
		box_1.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(box_1);
		if (Settings.theme_state)
			box_1.setBackground(Color.LIGHT_GRAY);
		else
			box_1.setBackground(Color.DARK_GRAY);
		
		label_2_2 = new JLabel("Nume");
		label_2_2.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(label_2_2);
		
		box_2 = new ColumnCheckBox(fields[1], 192, 66);
		box_2.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(box_2);
		if (Settings.theme_state)
			box_2.setBackground(Color.LIGHT_GRAY);
		else
			box_2.setBackground(Color.DARK_GRAY);
		
		label_2_3 = new JLabel("C.A.E.N.");
		label_2_3.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(label_2_3);
		
		box_3 = new ColumnCheckBox(fields[2], 261, 66);
		box_3.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(box_3);
		if (Settings.theme_state)
			box_3.setBackground(Color.LIGHT_GRAY);
		else
			box_3.setBackground(Color.DARK_GRAY);
		
		label_2_4 = new JLabel("C.U.I.");
		label_2_4.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(label_2_4);
		
		box_4 = new ColumnCheckBox(fields[3], 315, 66);
		box_4.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(box_4);
		if (Settings.theme_state)
			box_4.setBackground(Color.LIGHT_GRAY);
		else
			box_4.setBackground(Color.DARK_GRAY);
		
		label_2_5 = new JLabel("E.U.I.D.");
		label_2_5.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(label_2_5);
		
		box_5 = new ColumnCheckBox(fields[4], 261, 66);
		box_5.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(box_5);
		if (Settings.theme_state)
			box_5.setBackground(Color.LIGHT_GRAY);
		else
			box_5.setBackground(Color.DARK_GRAY);
		
		label_2_6 = new JLabel("Nr. ordine");
		label_2_6.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(label_2_6);
		
		box_6 = new ColumnCheckBox(fields[5], 261, 66);
		box_6.setHorizontalAlignment(SwingConstants.CENTER);
		panel.add(box_6);
		if (Settings.theme_state)
			box_6.setBackground(Color.LIGHT_GRAY);
		else
			box_6.setBackground(Color.DARK_GRAY);
		
		connect_to_database("jdbc:mysql://localhost:3306/my_database", "root", "bazededate2");
		populate_table(null, fields);
		
		apply_theme();
		apply_font();
		
	}
	
	protected static Field[] remove_item_from_fields (Field item) {
		int pos = -1;
		for (int i = 0; i < fields.length; i ++)
			if (fields[i].getName() == item.getName())
				pos = i;
		
		for (int i = pos; i < fields.length - 1; i ++)
			fields[i] = fields[i + 1];
		
		Field.setNr_of_fields(Field.getNr_of_fields() - 1);
		
		Field[] aux = new Field[Field.getNr_of_fields()];
		
		for (int i = 0; i < Field.getNr_of_fields(); i ++)
			aux[i] = fields[i];
		
		return aux;
	}
	
	protected static Field[] add_item_to_fields (Field item) {
		
		Field.setNr_of_fields(Field.getNr_of_fields() + 1);
		Field[] aux = new Field[Field.getNr_of_fields()];
		
		for (int i = 0; i < Field.getNr_of_fields() - 1; i ++)
			aux[i] = fields[i];
		
		aux[Field.getNr_of_fields() - 1] = item;
		return aux;
	}

	@Override
	public void apply_theme() {
		Color c1 = new Color(200,200,200);
		Color c2 = new Color(0,0,0);
		if (!Settings.theme_state) {
			frame.getContentPane().setBackground(new Color(20,20,20));
			search_button.setForeground(c1);
			search_button.setBackground(new Color(50,50,50));
			back_button.setForeground(c1);
			back_button.setBackground(new Color(50,50,50));
			
			label_1.setForeground(c1);
			label_2_1.setForeground(c1);
			label_2_2.setForeground(c1);
			label_2_3.setForeground(c1);
			label_2_4.setForeground(c1);
			label_2_5.setForeground(c1);
			label_2_6.setForeground(c1);
			
			panel.setBackground(Color.DARK_GRAY);
			
			text_field.setBackground(Color.DARK_GRAY);
			text_field.setForeground(c1);
			text_field.setCaretColor(Color.WHITE);
			
			scrollPane.setBackground(Color.GRAY);
			
			table.setBackground(new Color(150,150,150));
			table.setForeground(Color.WHITE);
			
			header.setBackground(Color.DARK_GRAY);
			header.setForeground(Color.WHITE);
		}
		else {
			frame.getContentPane().setBackground(new Color(255,255,255));
			search_button.setForeground(c2);	
			search_button.setBackground(new Color(238,238,238));
			back_button.setForeground(c2);	
			back_button.setBackground(new Color(238,238,238));
			
			label_1.setForeground(c2);
			label_2_1.setForeground(c2);
			label_2_2.setForeground(c2);
			label_2_3.setForeground(c2);
			label_2_4.setForeground(c2);
			label_2_5.setForeground(c2);
			label_2_6.setForeground(c2);
			
			panel.setBackground(Color.LIGHT_GRAY);
			
			text_field.setBackground(Color.WHITE);
			text_field.setForeground(Color.BLACK);
			text_field.setCaretColor(Color.BLACK);
			
			scrollPane.setBackground(new Color(238,238,238));
			
			table.setBackground(Color.WHITE);
			table.setForeground(Color.BLACK);
			
			header.setBackground(new Color(238,238,238));
			header.setForeground(Color.BLACK);
		}
	}
	
	@Override
	public void apply_font() {
		Font font = null, font_2 = null, font_3 = null;
		
		switch (Settings.font_state) {
			case mic:
				font =  new Font("Sans Serif", Font.PLAIN, 10);
				font_2 = new Font("Sans Serif", Font.PLAIN, 12);
				font_3 = new Font("Sans Serif", Font.PLAIN, 14);
				break;
			case mediu:
				font = new Font("Sans Serif", Font.PLAIN, 12);	
				font_2 = new Font("Sans Serif", Font.PLAIN, 14);
				font_3 = new Font("Sans Serif", Font.PLAIN, 16);
				break;
			case mare:
				font = new Font("Sans Serif", Font.PLAIN, 14);	
				font_2 = new Font("Sans Serif", Font.PLAIN, 16);
				font_3 = new Font("Sans Serif", Font.PLAIN, 18);
		}
		label_1.setFont(font_2);
		label_2_1.setFont(font);
		label_2_2.setFont(font);
		label_2_3.setFont(font);
		label_2_4.setFont(font);
		label_2_5.setFont(font);
		label_2_6.setFont(font);
		search_button.setFont(font_3);
		table.setFont(font);
		header.setFont(font_2);
	}
	
}